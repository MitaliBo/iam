// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

syntax = "proto3";

package openpitrix.iam.im;

option go_package = "openpitrix.io/iam/pkg/pb/im;pbim";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

import "openpitrix/iam/im/filter.proto";

// ----------------------------------------------------------------------------
// basic type
// ----------------------------------------------------------------------------

message User {
	string uid = 1;
	repeated string gid = 2;

	string name = 3;
	string email = 4;
	string phone_number = 5;
	string description = 6;
	string password = 7;
	string status = 8;
	map<string,string> extra = 9;

	google.protobuf.Timestamp create_time = 10;
	google.protobuf.Timestamp update_time = 11;
	google.protobuf.Timestamp status_time = 12;
}
message UserList {
	repeated User value = 1;
}

message Group {
	string gid = 1;
	string group_path = 2;

	string name = 3;
	string description = 4;
	string status = 5;
	map<string,string> extra = 6;

 	google.protobuf.Timestamp create_time = 7;
	google.protobuf.Timestamp update_time = 8;
	google.protobuf.Timestamp status_time = 9;
}

// ----------------------------------------------------------------------------
// service api
// ----------------------------------------------------------------------------

service AccountManager {
	rpc CreateGroup(Group) returns (Group) {
		option (google.api.http) = {
			post: "/apis/iam/groups"
			body: "*"
		};
	}
	rpc DeleteGroups(GroupIdList) returns (Empty) {
		option (google.api.http) = {
			delete: "/apis/iam/groups"
			body: "*"
		};
	}

	rpc CreateUser(User) returns (User) {
		option (google.api.http) = {
			post: "/apis/iam/users"
			body: "*"
		};
	}
	rpc DeleteUsers(UserIdList) returns (Empty) {
		option (google.api.http) = {
			post: "/apis/iam/users"
			body: "*"
		};
	}

	rpc ListUsers(Range) returns (ListUesrsResponse) {
		option (google.api.http) = {
			get: "/apis/iam/users"
		};
	}
	rpc ListGroups(Range) returns (ListGroupsResponse) {
		option (google.api.http) = {
			get: "/apis/iam/groups"
		};
	}

	rpc GetUser(UserId) returns (User) {
		option (google.api.http) = {
			get: "/apis/iam/users/{uid}"
		};
	}
	rpc GetUsersByGroupId(GroupId) returns (UserList) {
		option (google.api.http) = {
			get: "/apis/iam/groups/{gid}/users"
		};
	}
	rpc ModifyUser(User) returns (User) {
		option (google.api.http) = {
			patch: "/apis/iam/users/{uid}"
			body: "*"
		};
	}
	rpc ComparePassword(Password) returns (Empty) {
		option (google.api.http) = {
			post: "/apis/iam/password:compare"
			body: "*"
		};
	}
	rpc ModifyPassword(Password) returns (Empty) {
		option (google.api.http) = {
			post: "/apis/iam/password:modify"
			body: "*"
		};
	}

	rpc GetGroup(GroupId) returns (Group) {
		option (google.api.http) = {
			get: "/apis/iam/groups/{gid}"
		};
	}
	rpc ModifyGroup(Group) returns (Group) {
		option (google.api.http) = {
			patch: "/apis/iam/groups/{gid}"
			body: "*"
		};
	}

	rpc JoinGroup(JoinGroupRequest) returns (Empty) {
		option (google.api.http) = {
			post: "/apis/iam/groups:join"
			body: "*"
		};
	}
	rpc LeaveGroup(LeaveGroupRequest) returns (Empty) {
		option (google.api.http) = {
			post: "/apis/iam/groups:leave"
			body: "*"
		};
	}
}

// ----------------------------------------------------------------------------
// service api type
// ----------------------------------------------------------------------------

message Empty {
	//
}

message UserId {
	string uid = 1;
}
message UserIdList {
	repeated string uid = 1;
}

message GroupId {
	string gid = 1;
}
message GroupIdList {
	repeated string gid = 1;
}

message Range {
	map<string,FieldValidator> filter = 1;
	string sort_key = 2;
	bool reverse = 3;

	int32 offset = 4;
	int32 limit = 5;
}
message Password {
	string uid = 1;
	string password = 2;
}

message ListUesrsResponse {
	repeated User user = 1;
	int32 total = 2;
}
message ListGroupsResponse {
	repeated Group group = 1;
	int32 total = 2;
}

message JoinGroupRequest {
	repeated string gid = 1;
	repeated string uid = 2;
}
message LeaveGroupRequest {
	repeated string gid = 1;
	repeated string uid = 2;
}

// ----------------------------------------------------------------------------
// END
// ----------------------------------------------------------------------------
