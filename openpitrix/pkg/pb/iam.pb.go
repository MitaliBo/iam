// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iam.proto

package pb // import "openpitrix.io/iam/openpitrix/pkg/pb"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Group struct {
	Gid                  string               `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path                 string               `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	PathName             string               `protobuf:"bytes,4,opt,name=path_name,json=pathName,proto3" json:"path_name,omitempty"`
	Email                string               `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Description          string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Status               string               `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	StatusTime           *timestamp.Timestamp `protobuf:"bytes,10,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (dst *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(dst, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Group) GetPathName() string {
	if m != nil {
		return m.PathName
	}
	return ""
}

func (m *Group) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Group) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Group) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Group) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

type User struct {
	Uid                  string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  string               `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Name                 string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Role                 string               `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	ResourceNamespace    string               `protobuf:"bytes,5,opt,name=resource_namespace,json=resourceNamespace,proto3" json:"resource_namespace,omitempty"`
	Email                string               `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Description          string               `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Password             string               `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	Status               string               `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Office               string               `protobuf:"bytes,10,opt,name=office,proto3" json:"office,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	StatusTime           *timestamp.Timestamp `protobuf:"bytes,13,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{1}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *User) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *User) GetResourceNamespace() string {
	if m != nil {
		return m.ResourceNamespace
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *User) GetOffice() string {
	if m != nil {
		return m.Office
	}
	return ""
}

func (m *User) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *User) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *User) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

type UserPassword struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPassword) Reset()         { *m = UserPassword{} }
func (m *UserPassword) String() string { return proto.CompactTextString(m) }
func (*UserPassword) ProtoMessage()    {}
func (*UserPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{2}
}
func (m *UserPassword) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPassword.Unmarshal(m, b)
}
func (m *UserPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPassword.Marshal(b, m, deterministic)
}
func (dst *UserPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPassword.Merge(dst, src)
}
func (m *UserPassword) XXX_Size() int {
	return xxx_messageInfo_UserPassword.Size(m)
}
func (m *UserPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPassword.DiscardUnknown(m)
}

var xxx_messageInfo_UserPassword proto.InternalMessageInfo

func (m *UserPassword) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserPassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Role struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RuleId               []string `protobuf:"bytes,3,rep,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{3}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Role.Unmarshal(m, b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Role.Marshal(b, m, deterministic)
}
func (dst *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(dst, src)
}
func (m *Role) XXX_Size() int {
	return xxx_messageInfo_Role.Size(m)
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetRuleId() []string {
	if m != nil {
		return m.RuleId
	}
	return nil
}

type ActionRule struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MethodPattern        string   `protobuf:"bytes,3,opt,name=method_pattern,json=methodPattern,proto3" json:"method_pattern,omitempty"`
	NamespacePattern     []string `protobuf:"bytes,4,rep,name=namespace_pattern,json=namespacePattern,proto3" json:"namespace_pattern,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionRule) Reset()         { *m = ActionRule{} }
func (m *ActionRule) String() string { return proto.CompactTextString(m) }
func (*ActionRule) ProtoMessage()    {}
func (*ActionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{4}
}
func (m *ActionRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionRule.Unmarshal(m, b)
}
func (m *ActionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionRule.Marshal(b, m, deterministic)
}
func (dst *ActionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRule.Merge(dst, src)
}
func (m *ActionRule) XXX_Size() int {
	return xxx_messageInfo_ActionRule.Size(m)
}
func (m *ActionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRule.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRule proto.InternalMessageInfo

func (m *ActionRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ActionRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionRule) GetMethodPattern() string {
	if m != nil {
		return m.MethodPattern
	}
	return ""
}

func (m *ActionRule) GetNamespacePattern() []string {
	if m != nil {
		return m.NamespacePattern
	}
	return nil
}

type Action struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Method               string   `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{5}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Action.Unmarshal(m, b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Action.Marshal(b, m, deterministic)
}
func (dst *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(dst, src)
}
func (m *Action) XXX_Size() int {
	return xxx_messageInfo_Action.Size(m)
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Action) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Action) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{6}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Bool struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bool) Reset()         { *m = Bool{} }
func (m *Bool) String() string { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()    {}
func (*Bool) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{7}
}
func (m *Bool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bool.Unmarshal(m, b)
}
func (m *Bool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bool.Marshal(b, m, deterministic)
}
func (dst *Bool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bool.Merge(dst, src)
}
func (m *Bool) XXX_Size() int {
	return xxx_messageInfo_Bool.Size(m)
}
func (m *Bool) XXX_DiscardUnknown() {
	xxx_messageInfo_Bool.DiscardUnknown(m)
}

var xxx_messageInfo_Bool proto.InternalMessageInfo

func (m *Bool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{8}
}
func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (dst *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(dst, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IdList struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Value                []string `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdList) Reset()         { *m = IdList{} }
func (m *IdList) String() string { return proto.CompactTextString(m) }
func (*IdList) ProtoMessage()    {}
func (*IdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{9}
}
func (m *IdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdList.Unmarshal(m, b)
}
func (m *IdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdList.Marshal(b, m, deterministic)
}
func (dst *IdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdList.Merge(dst, src)
}
func (m *IdList) XXX_Size() int {
	return xxx_messageInfo_IdList.Size(m)
}
func (m *IdList) XXX_DiscardUnknown() {
	xxx_messageInfo_IdList.DiscardUnknown(m)
}

var xxx_messageInfo_IdList proto.InternalMessageInfo

func (m *IdList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *IdList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *IdList) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type GroupList struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Value                []*Group `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupList) Reset()         { *m = GroupList{} }
func (m *GroupList) String() string { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()    {}
func (*GroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{10}
}
func (m *GroupList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupList.Unmarshal(m, b)
}
func (m *GroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupList.Marshal(b, m, deterministic)
}
func (dst *GroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupList.Merge(dst, src)
}
func (m *GroupList) XXX_Size() int {
	return xxx_messageInfo_GroupList.Size(m)
}
func (m *GroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupList proto.InternalMessageInfo

func (m *GroupList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GroupList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GroupList) GetValue() []*Group {
	if m != nil {
		return m.Value
	}
	return nil
}

type UserList struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Value                []string `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{11}
}
func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (dst *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(dst, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *UserList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *UserList) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type RoleList struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Value                []string `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleList) Reset()         { *m = RoleList{} }
func (m *RoleList) String() string { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()    {}
func (*RoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{12}
}
func (m *RoleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleList.Unmarshal(m, b)
}
func (m *RoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleList.Marshal(b, m, deterministic)
}
func (dst *RoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleList.Merge(dst, src)
}
func (m *RoleList) XXX_Size() int {
	return xxx_messageInfo_RoleList.Size(m)
}
func (m *RoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleList.DiscardUnknown(m)
}

var xxx_messageInfo_RoleList proto.InternalMessageInfo

func (m *RoleList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *RoleList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RoleList) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type ActionRuleList struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Value                []string `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionRuleList) Reset()         { *m = ActionRuleList{} }
func (m *ActionRuleList) String() string { return proto.CompactTextString(m) }
func (*ActionRuleList) ProtoMessage()    {}
func (*ActionRuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{13}
}
func (m *ActionRuleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionRuleList.Unmarshal(m, b)
}
func (m *ActionRuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionRuleList.Marshal(b, m, deterministic)
}
func (dst *ActionRuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRuleList.Merge(dst, src)
}
func (m *ActionRuleList) XXX_Size() int {
	return xxx_messageInfo_ActionRuleList.Size(m)
}
func (m *ActionRuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRuleList.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRuleList proto.InternalMessageInfo

func (m *ActionRuleList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ActionRuleList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ActionRuleList) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type Range struct {
	Filter               map[string]*FieldValidator `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset               int32                      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int32                      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Namespace            string                     `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_iam_438d49d4d9951e92, []int{14}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (dst *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(dst, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetFilter() map[string]*FieldValidator {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *Range) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Range) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Range) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*Group)(nil), "openpitrix.iam.Group")
	proto.RegisterType((*User)(nil), "openpitrix.iam.User")
	proto.RegisterType((*UserPassword)(nil), "openpitrix.iam.UserPassword")
	proto.RegisterType((*Role)(nil), "openpitrix.iam.Role")
	proto.RegisterType((*ActionRule)(nil), "openpitrix.iam.ActionRule")
	proto.RegisterType((*Action)(nil), "openpitrix.iam.Action")
	proto.RegisterType((*Empty)(nil), "openpitrix.iam.Empty")
	proto.RegisterType((*Bool)(nil), "openpitrix.iam.Bool")
	proto.RegisterType((*Id)(nil), "openpitrix.iam.Id")
	proto.RegisterType((*IdList)(nil), "openpitrix.iam.IdList")
	proto.RegisterType((*GroupList)(nil), "openpitrix.iam.GroupList")
	proto.RegisterType((*UserList)(nil), "openpitrix.iam.UserList")
	proto.RegisterType((*RoleList)(nil), "openpitrix.iam.RoleList")
	proto.RegisterType((*ActionRuleList)(nil), "openpitrix.iam.ActionRuleList")
	proto.RegisterType((*Range)(nil), "openpitrix.iam.Range")
	proto.RegisterMapType((map[string]*FieldValidator)(nil), "openpitrix.iam.Range.FilterEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IAMManagerClient is the client API for IAMManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IAMManagerClient interface {
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroups(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error)
	ModifyGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DescribeGroups(ctx context.Context, in *Range, opts ...grpc.CallOption) (*GroupList, error)
	GetGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Group, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUsers(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error)
	ModifyUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DescribeUsers(ctx context.Context, in *Range, opts ...grpc.CallOption) (*UserList, error)
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error)
	ModifyRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error)
	DescribeRoles(ctx context.Context, in *Range, opts ...grpc.CallOption) (*RoleList, error)
	GetRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Role, error)
	CreateActionRule(ctx context.Context, in *ActionRule, opts ...grpc.CallOption) (*ActionRule, error)
	DeleteActionRule(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error)
	ModifyActionRule(ctx context.Context, in *ActionRule, opts ...grpc.CallOption) (*ActionRule, error)
	DescribeActionRules(ctx context.Context, in *Range, opts ...grpc.CallOption) (*ActionRuleList, error)
	GetActionRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ActionRule, error)
	ComparePassword(ctx context.Context, in *UserPassword, opts ...grpc.CallOption) (*Bool, error)
	ModifyPassword(ctx context.Context, in *UserPassword, opts ...grpc.CallOption) (*Bool, error)
	// check any of xid or role_name can do the action
	CanDo(ctx context.Context, in *Action, opts ...grpc.CallOption) (*Bool, error)
}

type iAMManagerClient struct {
	cc *grpc.ClientConn
}

func NewIAMManagerClient(cc *grpc.ClientConn) IAMManagerClient {
	return &iAMManagerClient{cc}
}

func (c *iAMManagerClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DeleteGroups(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DeleteGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) ModifyGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/ModifyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DescribeGroups(ctx context.Context, in *Range, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DescribeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) GetGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DeleteUsers(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) ModifyUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/ModifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DescribeUsers(ctx context.Context, in *Range, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DescribeUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DeleteRole(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) ModifyRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/ModifyRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DescribeRoles(ctx context.Context, in *Range, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DescribeRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) GetRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) CreateActionRule(ctx context.Context, in *ActionRule, opts ...grpc.CallOption) (*ActionRule, error) {
	out := new(ActionRule)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/CreateActionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DeleteActionRule(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DeleteActionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) ModifyActionRule(ctx context.Context, in *ActionRule, opts ...grpc.CallOption) (*ActionRule, error) {
	out := new(ActionRule)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/ModifyActionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) DescribeActionRules(ctx context.Context, in *Range, opts ...grpc.CallOption) (*ActionRuleList, error) {
	out := new(ActionRuleList)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/DescribeActionRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) GetActionRule(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ActionRule, error) {
	out := new(ActionRule)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/GetActionRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) ComparePassword(ctx context.Context, in *UserPassword, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/ComparePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) ModifyPassword(ctx context.Context, in *UserPassword, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMManagerClient) CanDo(ctx context.Context, in *Action, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.IAMManager/CanDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMManagerServer is the server API for IAMManager service.
type IAMManagerServer interface {
	CreateGroup(context.Context, *Group) (*Group, error)
	DeleteGroups(context.Context, *IdList) (*Bool, error)
	ModifyGroup(context.Context, *Group) (*Group, error)
	DescribeGroups(context.Context, *Range) (*GroupList, error)
	GetGroup(context.Context, *Id) (*Group, error)
	CreateUser(context.Context, *User) (*User, error)
	DeleteUsers(context.Context, *IdList) (*Bool, error)
	ModifyUser(context.Context, *User) (*User, error)
	DescribeUsers(context.Context, *Range) (*UserList, error)
	GetUser(context.Context, *Id) (*User, error)
	CreateRole(context.Context, *Role) (*Role, error)
	DeleteRole(context.Context, *IdList) (*Bool, error)
	ModifyRole(context.Context, *Role) (*Role, error)
	DescribeRoles(context.Context, *Range) (*RoleList, error)
	GetRole(context.Context, *Id) (*Role, error)
	CreateActionRule(context.Context, *ActionRule) (*ActionRule, error)
	DeleteActionRule(context.Context, *IdList) (*Bool, error)
	ModifyActionRule(context.Context, *ActionRule) (*ActionRule, error)
	DescribeActionRules(context.Context, *Range) (*ActionRuleList, error)
	GetActionRule(context.Context, *Id) (*ActionRule, error)
	ComparePassword(context.Context, *UserPassword) (*Bool, error)
	ModifyPassword(context.Context, *UserPassword) (*Bool, error)
	// check any of xid or role_name can do the action
	CanDo(context.Context, *Action) (*Bool, error)
}

func RegisterIAMManagerServer(s *grpc.Server, srv IAMManagerServer) {
	s.RegisterService(&_IAMManager_serviceDesc, srv)
}

func _IAMManager_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DeleteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DeleteGroups(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_ModifyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).ModifyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/ModifyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).ModifyGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DescribeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DescribeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DescribeGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DescribeGroups(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).GetGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DeleteUsers(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_ModifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).ModifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/ModifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).ModifyUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DescribeUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DescribeUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DescribeUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DescribeUsers(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DeleteRole(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_ModifyRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).ModifyRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/ModifyRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).ModifyRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DescribeRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DescribeRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DescribeRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DescribeRoles(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).GetRole(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_CreateActionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).CreateActionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/CreateActionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).CreateActionRule(ctx, req.(*ActionRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DeleteActionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DeleteActionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DeleteActionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DeleteActionRule(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_ModifyActionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).ModifyActionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/ModifyActionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).ModifyActionRule(ctx, req.(*ActionRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_DescribeActionRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).DescribeActionRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/DescribeActionRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).DescribeActionRules(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_GetActionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).GetActionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/GetActionRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).GetActionRule(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_ComparePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).ComparePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/ComparePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).ComparePassword(ctx, req.(*UserPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).ModifyPassword(ctx, req.(*UserPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMManager_CanDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMManagerServer).CanDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.IAMManager/CanDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMManagerServer).CanDo(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAMManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.iam.IAMManager",
	HandlerType: (*IAMManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _IAMManager_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroups",
			Handler:    _IAMManager_DeleteGroups_Handler,
		},
		{
			MethodName: "ModifyGroup",
			Handler:    _IAMManager_ModifyGroup_Handler,
		},
		{
			MethodName: "DescribeGroups",
			Handler:    _IAMManager_DescribeGroups_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _IAMManager_GetGroup_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IAMManager_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _IAMManager_DeleteUsers_Handler,
		},
		{
			MethodName: "ModifyUser",
			Handler:    _IAMManager_ModifyUser_Handler,
		},
		{
			MethodName: "DescribeUsers",
			Handler:    _IAMManager_DescribeUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IAMManager_GetUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IAMManager_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IAMManager_DeleteRole_Handler,
		},
		{
			MethodName: "ModifyRole",
			Handler:    _IAMManager_ModifyRole_Handler,
		},
		{
			MethodName: "DescribeRoles",
			Handler:    _IAMManager_DescribeRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IAMManager_GetRole_Handler,
		},
		{
			MethodName: "CreateActionRule",
			Handler:    _IAMManager_CreateActionRule_Handler,
		},
		{
			MethodName: "DeleteActionRule",
			Handler:    _IAMManager_DeleteActionRule_Handler,
		},
		{
			MethodName: "ModifyActionRule",
			Handler:    _IAMManager_ModifyActionRule_Handler,
		},
		{
			MethodName: "DescribeActionRules",
			Handler:    _IAMManager_DescribeActionRules_Handler,
		},
		{
			MethodName: "GetActionRule",
			Handler:    _IAMManager_GetActionRule_Handler,
		},
		{
			MethodName: "ComparePassword",
			Handler:    _IAMManager_ComparePassword_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _IAMManager_ModifyPassword_Handler,
		},
		{
			MethodName: "CanDo",
			Handler:    _IAMManager_CanDo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam.proto",
}

func init() { proto.RegisterFile("iam.proto", fileDescriptor_iam_438d49d4d9951e92) }

var fileDescriptor_iam_438d49d4d9951e92 = []byte{
	// 1253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x86, 0x7e, 0x2d, 0x8d, 0x6c, 0xd5, 0xd9, 0x24, 0xae, 0xca, 0x28, 0x8e, 0xc2, 0x26, 0xa9,
	0xa1, 0x34, 0x22, 0xa0, 0x38, 0x40, 0x1b, 0xb7, 0x87, 0xc4, 0x4e, 0x0c, 0x03, 0xb1, 0x61, 0x08,
	0x69, 0x81, 0x14, 0x41, 0xed, 0x95, 0xb8, 0x52, 0xb6, 0xa6, 0x44, 0x82, 0x5c, 0xa5, 0x15, 0x0c,
	0x5f, 0x8a, 0x1e, 0x7a, 0xeb, 0xa1, 0xaf, 0xd3, 0xb7, 0xe8, 0x2b, 0xb4, 0x87, 0xbe, 0x45, 0xb1,
	0xb3, 0xa4, 0x44, 0x51, 0x2b, 0xff, 0x9f, 0xcc, 0x99, 0xdd, 0xfd, 0xbe, 0x99, 0xf9, 0x3e, 0x72,
	0x2d, 0x28, 0x72, 0xda, 0x6f, 0x78, 0xbe, 0x2b, 0x5c, 0x52, 0x76, 0x3d, 0x36, 0xf0, 0xb8, 0xf0,
	0xf9, 0x2f, 0x0d, 0x4e, 0xfb, 0xc6, 0xbd, 0x9e, 0xeb, 0xf6, 0x1c, 0x66, 0xe1, 0x6a, 0x7b, 0xd8,
	0xb5, 0x04, 0xef, 0xb3, 0x40, 0xd0, 0xbe, 0xa7, 0x0e, 0x18, 0xd5, 0x70, 0x03, 0xf5, 0xb8, 0x45,
	0x07, 0x03, 0x57, 0x50, 0xc1, 0xdd, 0x41, 0x10, 0xae, 0x2e, 0x76, 0xb9, 0x23, 0x98, 0xaf, 0x22,
	0xf3, 0xdf, 0x34, 0xe4, 0xb6, 0x7d, 0x77, 0xe8, 0x91, 0x65, 0xc8, 0xf4, 0xb8, 0x5d, 0x49, 0xd5,
	0x52, 0x6b, 0xc5, 0x96, 0x7c, 0x24, 0x04, 0xb2, 0x03, 0xda, 0x67, 0x95, 0x34, 0xa6, 0xf0, 0x59,
	0xe6, 0x3c, 0x2a, 0x3e, 0x54, 0x32, 0x2a, 0x27, 0x9f, 0xc9, 0x1d, 0x28, 0xca, 0xbf, 0x07, 0xb8,
	0x39, 0x8b, 0x0b, 0x05, 0x99, 0xd8, 0x93, 0x07, 0x6e, 0x41, 0x8e, 0xf5, 0x29, 0x77, 0x2a, 0x39,
	0x5c, 0x50, 0x01, 0xa9, 0x41, 0xc9, 0x66, 0x41, 0xc7, 0xe7, 0x9e, 0x2c, 0xad, 0x92, 0xc7, 0xb5,
	0x78, 0x8a, 0xac, 0x40, 0x3e, 0x10, 0x54, 0x0c, 0x83, 0xca, 0x02, 0x2e, 0x86, 0x11, 0xd9, 0x80,
	0x52, 0xc7, 0x67, 0x54, 0xb0, 0x03, 0xd9, 0x76, 0xa5, 0x50, 0x4b, 0xad, 0x95, 0x9a, 0x46, 0x43,
	0xb5, 0xdc, 0x88, 0x66, 0xd2, 0x78, 0x1b, 0xcd, 0xa4, 0x05, 0x6a, 0xbb, 0x4c, 0xc8, 0xc3, 0x43,
	0xcf, 0x1e, 0x1f, 0x2e, 0x9e, 0x7d, 0x58, 0x6d, 0x8f, 0x0e, 0xab, 0x1a, 0xd4, 0x61, 0x38, 0xfb,
	0xb0, 0xda, 0x2e, 0x13, 0xe6, 0x5f, 0x19, 0xc8, 0x7e, 0x17, 0x30, 0x5f, 0x8e, 0x79, 0x38, 0x19,
	0xf3, 0x90, 0xdb, 0xd1, 0xe0, 0xd3, 0xb3, 0x83, 0xcf, 0x4c, 0x0f, 0xde, 0x77, 0x9d, 0x68, 0xbe,
	0xf8, 0x4c, 0x9e, 0x00, 0xf1, 0x59, 0xe0, 0x0e, 0xfd, 0x0e, 0xc3, 0xe1, 0x07, 0x1e, 0xed, 0xb0,
	0x70, 0xd0, 0x37, 0xa2, 0x95, 0xbd, 0x68, 0x61, 0x22, 0x45, 0xfe, 0x14, 0x29, 0x16, 0x66, 0xa5,
	0x30, 0xa0, 0xe0, 0xd1, 0x20, 0xf8, 0xd9, 0xf5, 0x6d, 0x9c, 0x37, 0xca, 0xab, 0xe2, 0x98, 0x4c,
	0xc5, 0x29, 0x99, 0x56, 0x20, 0xef, 0x76, 0xbb, 0xbc, 0xa3, 0xe6, 0x54, 0x6c, 0x85, 0x51, 0x52,
	0xbe, 0xd2, 0x55, 0xe4, 0x5b, 0xbc, 0x8a, 0x7c, 0x4b, 0x17, 0x92, 0xef, 0x1b, 0x58, 0x94, 0xea,
	0xed, 0x47, 0x6d, 0xcf, 0xaa, 0x18, 0x1f, 0x52, 0x7a, 0x7a, 0x48, 0xe6, 0x26, 0x64, 0x5b, 0x52,
	0xaf, 0x32, 0xa4, 0xc7, 0x87, 0xd2, 0x73, 0x5e, 0xb0, 0x4f, 0x61, 0xc1, 0x1f, 0x3a, 0xec, 0x80,
	0xdb, 0x95, 0x4c, 0x2d, 0x23, 0x27, 0x27, 0xc3, 0x1d, 0xdb, 0xfc, 0x2d, 0x05, 0xf0, 0xa2, 0x23,
	0x05, 0x69, 0x0d, 0xcf, 0x89, 0xf5, 0x10, 0xca, 0x7d, 0x26, 0x3e, 0xb8, 0xf6, 0x81, 0x47, 0x85,
	0x60, 0xfe, 0x20, 0x74, 0xd4, 0x92, 0xca, 0xee, 0xab, 0x24, 0x79, 0x0c, 0x37, 0xc6, 0xee, 0x19,
	0xef, 0xcc, 0x22, 0xf9, 0xf2, 0x78, 0x21, 0xdc, 0x6c, 0xee, 0x43, 0x5e, 0x55, 0xa1, 0x99, 0xc1,
	0x0a, 0xe4, 0x15, 0x72, 0x58, 0x45, 0x18, 0x91, 0x2a, 0x14, 0x27, 0xf6, 0x54, 0x25, 0x4c, 0x12,
	0xe6, 0x02, 0xe4, 0x5e, 0xf5, 0x3d, 0x31, 0x32, 0xab, 0x90, 0x7d, 0xe9, 0xba, 0x8e, 0xf4, 0xe9,
	0x47, 0xea, 0x0c, 0x19, 0x42, 0x17, 0x5a, 0x2a, 0x30, 0x6f, 0x41, 0x7a, 0xc7, 0x4e, 0xb6, 0x6d,
	0xbe, 0x81, 0xfc, 0x8e, 0xfd, 0x86, 0x07, 0x42, 0x9e, 0x12, 0xae, 0xa0, 0x0e, 0x2e, 0xe6, 0x5a,
	0x2a, 0x08, 0x7d, 0x18, 0x30, 0x81, 0x25, 0xe5, 0x5a, 0x61, 0x34, 0xe1, 0x50, 0x43, 0x0e, 0x39,
	0xba, 0x50, 0xc4, 0x8f, 0xe1, 0x25, 0x00, 0x1f, 0xc7, 0x01, 0x4b, 0xcd, 0xdb, 0x8d, 0xe9, 0xaf,
	0x76, 0x03, 0x71, 0x23, 0x9e, 0x3d, 0x28, 0x48, 0x3b, 0x5d, 0x5b, 0xdd, 0x7b, 0x50, 0x90, 0x06,
	0xbb, 0x36, 0xbc, 0xb7, 0x50, 0x9e, 0x58, 0xed, 0xda, 0x50, 0xff, 0x4b, 0x41, 0xae, 0x45, 0x07,
	0x3d, 0x46, 0xbe, 0x86, 0xbc, 0xba, 0x85, 0x2a, 0x29, 0x9c, 0xd6, 0xfd, 0xe4, 0xb4, 0x70, 0x5b,
	0xe3, 0x35, 0xee, 0x79, 0x35, 0x10, 0xfe, 0xa8, 0x15, 0x1e, 0x38, 0x8d, 0xd2, 0xe1, 0x7d, 0x2e,
	0xd0, 0x5f, 0xb9, 0x96, 0x0a, 0xa6, 0x9d, 0x97, 0x4d, 0x38, 0xcf, 0x78, 0x07, 0xa5, 0x18, 0x85,
	0x34, 0xf4, 0x11, 0x1b, 0x45, 0x86, 0x3e, 0x62, 0x23, 0xb2, 0x1e, 0xf5, 0x91, 0xc6, 0xaf, 0xc5,
	0x6a, 0xb2, 0xcc, 0xd7, 0x9c, 0x39, 0xf6, 0xf7, 0xd4, 0xe1, 0x36, 0x15, 0xae, 0x1f, 0xf6, 0xf9,
	0x3c, 0xfd, 0x55, 0xaa, 0xf9, 0xc7, 0x4d, 0x80, 0x9d, 0x17, 0xbb, 0xbb, 0x74, 0x40, 0x7b, 0xcc,
	0x27, 0x87, 0x50, 0xda, 0xc4, 0xef, 0x98, 0xba, 0x6b, 0xf5, 0xee, 0x30, 0xf4, 0x69, 0xf3, 0xf3,
	0x5f, 0xff, 0xfe, 0xe7, 0xcf, 0xf4, 0x5d, 0xf3, 0x0e, 0xde, 0xe8, 0x13, 0xd4, 0x46, 0x1c, 0xb2,
	0x0d, 0x8b, 0x5b, 0xcc, 0x61, 0x61, 0x18, 0x90, 0x95, 0x24, 0x96, 0x7a, 0x4d, 0x8c, 0x5b, 0xc9,
	0xbc, 0x7c, 0xe5, 0xcc, 0x07, 0x48, 0xb1, 0x5a, 0xaf, 0x26, 0x29, 0xa6, 0x30, 0x0f, 0xa1, 0xb4,
	0xeb, 0xda, 0xbc, 0x3b, 0xba, 0x42, 0x17, 0xcd, 0x99, 0x2e, 0xe2, 0x90, 0x23, 0x28, 0x6f, 0xe1,
	0xcd, 0xd3, 0x8e, 0x38, 0x6f, 0x6b, 0xad, 0x61, 0x7c, 0xa6, 0x25, 0x91, 0x1d, 0x9a, 0xcf, 0x90,
	0xc8, 0x22, 0x4f, 0x66, 0x7b, 0x89, 0x23, 0x5b, 0xc7, 0x63, 0x23, 0x7c, 0x5b, 0xaf, 0x9f, 0x90,
	0xf7, 0x50, 0xd8, 0x66, 0x42, 0x95, 0x41, 0x66, 0x87, 0x37, 0xaf, 0xad, 0x87, 0xc8, 0x76, 0x8f,
	0xdc, 0x4d, 0xb2, 0x45, 0x60, 0xd6, 0x31, 0xb7, 0x25, 0x3a, 0x28, 0xb5, 0xf0, 0x9f, 0x80, 0x19,
	0x11, 0x64, 0xd6, 0xd0, 0x66, 0x4d, 0x13, 0x09, 0xaa, 0xa6, 0xa1, 0x57, 0x1f, 0xf1, 0x0e, 0xa1,
	0xa4, 0x84, 0x92, 0xd1, 0x45, 0xb5, 0x0f, 0x85, 0xa9, 0xdf, 0xd1, 0x6b, 0xaf, 0x20, 0xdf, 0x03,
	0x28, 0x9d, 0x2e, 0x5b, 0x7f, 0xd3, 0xd0, 0xeb, 0x8e, 0x78, 0x1f, 0x61, 0x29, 0x12, 0x47, 0xd1,
	0xcd, 0x51, 0xbd, 0xa2, 0x63, 0x40, 0xd1, 0xd7, 0x91, 0xa5, 0x41, 0xbe, 0x9c, 0x27, 0x3a, 0xe2,
	0x26, 0x35, 0x7f, 0x07, 0x0b, 0xdb, 0x4c, 0x60, 0x09, 0x3a, 0xc9, 0xf5, 0x0d, 0x85, 0xef, 0x0a,
	0xa9, 0x6a, 0x14, 0x97, 0x1b, 0x12, 0x82, 0xe3, 0xcd, 0x3f, 0x83, 0x24, 0xb3, 0x86, 0x36, 0x7b,
	0x96, 0xe0, 0x88, 0xf7, 0x23, 0x80, 0x52, 0x07, 0xa3, 0x8b, 0xe9, 0x1d, 0xe2, 0xd7, 0x0d, 0xbd,
	0xde, 0x88, 0x38, 0x96, 0xfb, 0xb2, 0xd5, 0xcf, 0x93, 0x1b, 0xf1, 0x62, 0x72, 0xcb, 0xf8, 0xfc,
	0x72, 0x47, 0x97, 0xdc, 0xd9, 0x72, 0x23, 0xae, 0x5e, 0x6e, 0x2c, 0xe1, 0x5c, 0x72, 0x63, 0x43,
	0xa7, 0xc9, 0x2d, 0x37, 0x28, 0xb9, 0x05, 0x2c, 0x2b, 0x79, 0x62, 0xff, 0xa2, 0x19, 0x49, 0xbc,
	0xc9, 0x9a, 0x71, 0xca, 0x9a, 0xb9, 0x86, 0x8c, 0xa6, 0x59, 0xd3, 0x1b, 0x20, 0xc6, 0xf0, 0x13,
	0x2c, 0x2b, 0xd1, 0x62, 0xb9, 0x8b, 0x99, 0x21, 0xe4, 0xaa, 0xd7, 0xf4, 0x66, 0x88, 0xe1, 0x0a,
	0x58, 0x56, 0x12, 0x5e, 0x5f, 0x87, 0xcd, 0x9a, 0xde, 0x24, 0x31, 0x86, 0xdf, 0x53, 0x70, 0x33,
	0xd2, 0x74, 0x92, 0x9e, 0xeb, 0x98, 0xd5, 0xf9, 0xa4, 0xe8, 0x9b, 0xe7, 0x48, 0xbc, 0x4e, 0x9a,
	0xf3, 0x7c, 0x13, 0xe3, 0x48, 0xba, 0xe7, 0x08, 0x96, 0xb6, 0x99, 0x88, 0xd5, 0xa6, 0xf3, 0xd0,
	0x69, 0x5d, 0xd7, 0x91, 0xfc, 0x01, 0x31, 0x35, 0x4e, 0x9a, 0x6c, 0x53, 0x7e, 0x1a, 0xc0, 0x27,
	0x9b, 0x6e, 0xdf, 0xa3, 0x3e, 0x1b, 0xff, 0xe6, 0xa8, 0xea, 0xbe, 0x46, 0xd1, 0xea, 0x1c, 0x79,
	0xbf, 0x40, 0xca, 0xfb, 0xe6, 0xbd, 0x19, 0x2b, 0x25, 0xc0, 0x1d, 0x28, 0xab, 0xd9, 0x5f, 0x89,
	0xee, 0x11, 0xd2, 0xd5, 0xcc, 0x55, 0xbd, 0xae, 0x63, 0x6c, 0x1f, 0x72, 0x9b, 0x74, 0xb0, 0xe5,
	0xce, 0x9a, 0x55, 0xcd, 0x61, 0x0e, 0xfc, 0x06, 0xc2, 0x3f, 0x23, 0x4f, 0x67, 0xba, 0x91, 0x60,
	0xd6, 0xf1, 0x90, 0xdb, 0x27, 0xd6, 0xb1, 0xfa, 0xd1, 0x71, 0x92, 0x90, 0xef, 0xe5, 0xda, 0x0f,
	0x8f, 0xe2, 0x98, 0xae, 0xc5, 0x69, 0xdf, 0x9a, 0x64, 0x2c, 0xef, 0xa8, 0x67, 0x79, 0xed, 0x0d,
	0xaf, 0xdd, 0xce, 0xe3, 0x8f, 0xc1, 0xa7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x42, 0x83,
	0x53, 0x84, 0x11, 0x00, 0x00,
}
