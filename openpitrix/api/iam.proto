// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

syntax = "proto3";

package openpitrix.iam;

option go_package = "openpitrix.io/iam/openpitrix/pkg/pb;pb";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

import "filter.proto";

// ----------------------------------------------------------------------------
// basic type
// ----------------------------------------------------------------------------

message RequestHeader {
	string user_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
}
message ResponseHeader {
	string user_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
	string owner_path = 2 [(validator.field) = {regex: "^[a-z]+$"}];
	string access_path = 3 [(validator.field) = {regex: "^[a-z]+$"}];
}

message Range {
	map<string,FieldValidator> filter = 1;
	int32 offset = 2;
	int32 limit = 3;
}

message Bool {
	bool value = 1;
}
message String {
	string value = 1;
}

// ----------------------------------------------------------------------------
// 1. Action
// ----------------------------------------------------------------------------

message Action {
	string action_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
	string action_name = 2 [(validator.field) = {regex: "^[a-z]+$"}];
	string method = 3 [(validator.field) = {regex: "^[a-z]+$"}];
	string description = 4;
	string feature_id = 5;
	string feature_name = 6 ;
	string module_id = 7 ;
	string module_name = 8 ;
}

message ActionList {
	repeated Action value = 1;
	int32 total_count = 2;
}

// ----------------------------------------------------------------------------
// 2. Role
// ----------------------------------------------------------------------------

message Role {
	string role_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
	string role_name = 2;
	string description = 3;
	string portal = 4 ;
	string owner = 5 ;
	string owner_path = 6;

	google.protobuf.Timestamp create_time = 7;
	google.protobuf.Timestamp update_time = 8;
}

message CreateRoleRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	Role value = 2;
}
message CreateRoleResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	string role_id = 2;
}

message DeleteRolesRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated string role_id = 2;
}
message DeleteRolesResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated string role_id = 2;
}

message ModifyRoleRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	Role value = 2;
}
message ModifyRoleResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	string role_id = 2;
}

message GetRoleRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	string role_id = 2;
}
message GetRoleResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	Role value = 2;
}

message DescribeRolesRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	Range range = 2;
}
message DescribeRolesResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated Role value = 2;
	int32 total_count = 3;
}

// ----------------------------------------------------------------------------
// 3. RoleModuleBinding
// ----------------------------------------------------------------------------

message RoleModuleBinding {
	string binding_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
	string role_id = 2 [(validator.field) = {regex: "^[a-z]+$"}];
	string module_id = 3 [(validator.field) = {regex: "^[a-z]+$"}];
	string data_level = 4 ;
	string enabled_actions = 5; // 001:createapp, 002:modifyapp
	string owner = 8 ;

	google.protobuf.Timestamp create_time = 6;
	google.protobuf.Timestamp update_time = 7;
}

message ModifyRoleModuleBindingsRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	RoleModuleBinding binding = 2;
}
message ModifyRoleModuleBindingsResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
}

// ----------------------------------------------------------------------------
// 4.Group
// ----------------------------------------------------------------------------

message Group {
	string group_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
	string group_name = 2 [(validator.field) = {regex: "^[a-z]+$"}];
	string parent_group_id = 3 [(validator.field) = {regex: "^[a-z]+$"}];
	string group_path = 4;
	string level = 5;
	string seq_order = 6;
	string owner = 9 ;
	string owner_path = 10 ;

	google.protobuf.Timestamp create_time = 7;
	google.protobuf.Timestamp update_time = 8;
}

message CreateGroupRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	Group value = 2;
}
message CreateGroupResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	string group_id = 2;
}

message DeleteGroupsRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated string group_id = 2;
}
message DeleteGroupsResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated string group_id = 2;
}

message ModifyGroupRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	Group value = 2;
}
message ModifyGroupResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	string group_id = 2;
}

message GetGroupRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	string group_id = 2;
}
message GetGroupResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	Group value = 2;
}

message DescribeGroupsRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	Range range = 2;
}
message DescribeGroupsResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated Group value = 2;
	int32 total_count = 3;
}

// ----------------------------------------------------------------------------
// 5.User
// ----------------------------------------------------------------------------

message User {
	string user_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
	string group_id = 2 [(validator.field) = {regex: "^[a-z]+$"}];
	string role_id = 3 [(validator.field) = {regex: "^[a-z]+$"}];
	string user_name = 4 [(validator.field) = {regex: "^[a-z]+$"}];
	string position = 5;
	string email = 6;
	string phone_number = 7;
	string password = 8;
	string old_password = 9;
	string description = 10;
	string status = 11;
	string owner = 15 ;
	string owner_path = 16 ;

	google.protobuf.Timestamp create_time = 12;
	google.protobuf.Timestamp status_time = 13;
	google.protobuf.Timestamp update_time = 14;
}

message UserPassword {
	string user_id = 1 [(validator.field) = {regex: "^[a-z]+$"}];
	string password = 2 [(validator.field) = {regex: "^[a-z]+$"}];
}

message CreateUserRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	User value = 2;
}
message CreateUserResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	string user_id = 2;
}

message DeleteUsersRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated string user_id = 2;
}
message DeleteUsersResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated string user_id = 2;
}

message ModifyUserRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	User value = 2;
}
message ModifyUserResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	string user_id = 2;
}

message GetUserRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	string user_id = 2;
}
message GetUserResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	User value = 2;
}

message DescribeUsersRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	Range range = 2;
}
message DescribeUsersResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	repeated User value = 2;
	int32 total_count = 3;
}

// ----------------------------------------------------------------------------
// CanDoAction
// ----------------------------------------------------------------------------

message CanDoActionRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	string method = 2 [(validator.field) = {regex: "^[a-z]+$"}];
	string access_path = 3;
}
message CanDoActionResponse {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	bool ok = 2;
}

message GetOwnerPathRequest {
	RequestHeader head = 1 [(validator.field) = {msg_exists: true}];
	string method = 2 [(validator.field) = {regex: "^[a-z]+$"}];
}
message GetAccessPathRequest {
	ResponseHeader head = 1 [(validator.field) = {msg_exists: true}];
	string method = 2 [(validator.field) = {regex: "^[a-z]+$"}];
}

// ----------------------------------------------------------------------------
// IAMManager Service
// ----------------------------------------------------------------------------

service IAMManager {
	// -------------------------------------------------------------
	// 1.Action
	// action的数据不走数据权限，直接拿到全部
	// -------------------------------------------------------------

	rpc DescribeActions(Range) returns (ActionList) {
		option (google.api.http) = {
			get: "/static/IAMManager.DescribeActions"
		};
	}

	// -------------------------------------------------------------
	// 2.Role
	// insert Role 从request里面拿到group_path到字段owner_path里。
	// -------------------------------------------------------------

	rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateRole/{head.user_id}"
			body: "*"
		};
	}

	// 注意：删除的时候注意需要递归删除，对应的role id list 的role包含的user的role_id 要修改为空，
	// 并且Role对应的Feature和Action表数据也要清理掉
	rpc DeleteRoles(DeleteRolesRequest) returns (DeleteRolesResponse) {
		option (google.api.http) = {
			delete: "/api/IAMManager.DeleteRole/{head.user_id}"
		};
	}

	rpc ModifyRole(ModifyRoleRequest) returns (ModifyRoleResponse) {
		option (google.api.http) = {
			patch: "/api/IAMManager.ModifyRole/{head.user_id}"
		};
	}
	rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
		option (google.api.http) = {
			get: "/api/IAMManager.GetRole/{head.user_id}"
		};
	}

	rpc DescribeRoles(DescribeRolesRequest) returns (DescribeRolesResponse) {
		option (google.api.http) = {
			get: "/api/IAMManager.DescribeRoles/{head.user_id}"
		};
	}


	// -------------------------------------------------------------
	// 3.RoleModuleBinding
	// -------------------------------------------------------------

	rpc ModifyRoleModuleBindings(ModifyRoleModuleBindingsRequest) returns (ModifyRoleModuleBindingsResponse) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyRoleModuleBindings/{head.user_id}"
		};
	}

	// -------------------------------------------------------------
	// 4.Group
	// -------------------------------------------------------------

	rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateGroup/{head.user_id}"
		};
	}

	rpc DeleteGroups(DeleteGroupsRequest) returns (DeleteGroupsResponse) {
		option (google.api.http) = {
			delete: "/api/IAMManager.DeleteGroups/{head.user_id}"
		};
	}

	rpc ModifyGroup(ModifyGroupRequest) returns (ModifyGroupResponse) {
		option (google.api.http) = {
			patch: "/api/IAMManager.ModifyGroup/{head.user_id}"
		};
	}

	rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
		option (google.api.http) = {
			get: "/api/IAMManager.GetGroup/{head.user_id}"
		};
	}

	rpc DescribeGroups(DescribeGroupsRequest) returns (DescribeGroupsResponse) {
		option (google.api.http) = {
			get: "/api/IAMManager.DescribeGroups/{head.user_id}"
		};
	}

	// -------------------------------------------------------------
	// 5.User
	// -------------------------------------------------------------

	rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateUser/{head.user_id}"
		};
	}
	rpc DeleteUsers(DeleteUsersRequest) returns (DeleteUsersResponse) {
		option (google.api.http) = {
			delete: "/api/IAMManager.DeleteUsers/{head.user_id}"
		};
	}
	rpc ModifyUser(ModifyUserRequest) returns (ModifyUserResponse) {
		option (google.api.http) = {
			patch: "/api/IAMManager.ModifyUser/{head.user_id}"
		};
	}
	rpc DescribeUsers(DescribeUsersRequest) returns (DescribeUsersResponse) {
		option (google.api.http) = {
			get: "/api/IAMManager.DescribeUsers/{head.user_id}"
		};
	}
	rpc GetUser(GetUserRequest) returns (GetUserResponse) {
		option (google.api.http) = {
			get: "/api/IAMManager.GetUser/{head.user_id}"
		};
	}

	rpc ComparePassword(UserPassword) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.ComparePassword"
		};
	}
	rpc ModifyPassword(UserPassword) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyPassword"
		};
	}


	// -------------------------------------------------------------
	// 7.other
	// 通过user_id, 关联user和group得到group path，并且需要在group path后加上user_id.
	// group1.group2.group3:Jo
	// -------------------------------------------------------------

	rpc GetOwnerPath(GetOwnerPathRequest) returns (String) {
		option (google.api.http) = {
			post: "/api/IAMManager.GetOwnerPath/{head.user_id}"
		};
	}

	// 通过user_id,关联user,group,role,role_feature_binding，
	// 根据datalevel来处理group_path,得到access_path.
	rpc GetAccessPath(GetAccessPathRequest) returns (String) {
		option (google.api.http) = {
			post: "/api/IAMManager.GetAccessPath/{head.user_id}"
		};
	}

	// check any of xid or role_name can do the action
	// 通过登录用户的user_id, method 判断用户是否有权限执行业务模块的具体功能。
	rpc CanDoAction(CanDoActionRequest) returns (CanDoActionResponse);
}

// ----------------------------------------------------------------------------
// END
// ----------------------------------------------------------------------------

