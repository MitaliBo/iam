// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

syntax = "proto3";

package openpitrix.iam;

option go_package = "openpitrix.io/iam/openpitrix/pkg/pb;pb";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "filter.proto";

// ----------------------------------------------------------------------------
// The Pattern Syntax
// ----------------------------------------------------------------------------

// The pattern syntax is:
//
//	pattern:
//	{ term }
//	term:
//		'*'         matches any sequence of non-Separator characters
//		'**'        matches any sequence of characters, include path separators.
//		'?'         matches any single non-Separator character
//		'[' [ '^' ] { character-range } ']'
//		            character class (must be non-empty)
//		c           matches character c (c != '*', '?', '\\', '[')
//		'\\' c      matches character c
//
//	character-range:
//		c           matches character c (c != '\\', '-', ']')
//		'\\' c      matches character c
//		lo '-' hi   matches character c for lo <= c <= hi
//
// See https://godoc.org/path/filepath#Match
// See https://github.com/bmatcuk/doublestar
//
// Examples: https://golang.org/src/path/filepath/match_test.go

// ----------------------------------------------------------------------------
// basic type
// ----------------------------------------------------------------------------

message Group {
	string gid = 1;
	string name = 2;

	string path = 3;
	string path_name = 4;

	string email = 5;
	string description = 6;

	string status = 7;

	google.protobuf.Timestamp create_time = 8;
	google.protobuf.Timestamp update_time = 9;
	google.protobuf.Timestamp status_time = 10;
}

message User {
	string uid = 1;
	string gid = 2;

	string name = 3;
	string role = 4; // role type
	string resource_namespace = 5;

	string email = 6;
	string description = 7;
	string password = 8;
	string status = 9;
	string office = 10;

	google.protobuf.Timestamp create_time = 11;
	google.protobuf.Timestamp update_time = 12;
	google.protobuf.Timestamp status_time = 13;
}
message UserPassword {
	string uid = 1;
	string password = 2;
}

message Role {
	string id = 1;
	string name = 2;
	repeated string rule_id = 3;
}

message ActionRule {
	string id = 1;
	string name = 2;

	string method_pattern = 3;             // See Pattern Syntax
	repeated string namespace_pattern = 4; // See Pattern Syntax
}

message Action {
	repeated string uid = 1; // uid_1234
	string method = 2;       // GRPC: ServiceName.ServiceMethodName
	string namespace = 3;    // qingcloud.test
}

// ----------------------------------------------------------------------------
// service api
// ----------------------------------------------------------------------------

// For ModifyXXX
// if message.field is spacestring, set it empty string value.
// if message.field is empty string, set it NULL.
//
// https://github.com/chai2010/spacestring

// Identity and Access Management System for OpenPitrix.
service IAMManager {
	rpc CreateGroup(Group) returns (Group) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateGroup"
		};
	}
	rpc DeleteGroups(IdList) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.DeleteGroups"
		};
	}
	rpc ModifyGroup(Group) returns (Group) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyGroup"
		};
	}
	rpc DescribeGroups(Range) returns (GroupList) {
		option (google.api.http) = {
			post: "/api/IAMManager.DescribeGroups"
		};
	}
	rpc GetGroup(Id) returns (Group) {
		option (google.api.http) = {
			post: "/api/IAMManager.GetGroup"
		};
	}

	rpc CreateUser(User) returns (User) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateUser"
		};
	}
	rpc DeleteUsers(IdList) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.DeleteUsers"
		};
	}
	rpc ModifyUser(User) returns (User) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyUser"
		};
	}
	rpc DescribeUsers(Range) returns (UserList) {
		option (google.api.http) = {
			post: "/api/IAMManager.DescribeUsers"
		};
	}
	rpc GetUser(Id) returns (User) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateGroup"
		};
	}

	rpc CreateRole(Role) returns (Role) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateRole"
		};
	}
	rpc DeleteRole(IdList) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.DeleteRole"
		};
	}
	rpc ModifyRole(Role) returns (Role) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyRole"
		};
	}
	rpc DescribeRoles(Range) returns (RoleList) {
		option (google.api.http) = {
			post: "/api/IAMManager.DescribeRoles"
		};
	}
	rpc GetRole(Id) returns (Role) {
		option (google.api.http) = {
			post: "/api/IAMManager.GetRole"
		};
	}

	rpc CreateActionRule(ActionRule) returns (ActionRule) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateActionRule"
		};
	}
	rpc DeleteActionRule(IdList) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.DeleteActionRule"
		};
	}
	rpc ModifyActionRule(ActionRule) returns (ActionRule) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyActionRule"
		};
	}
	rpc DescribeActionRules(Range) returns (ActionRuleList) {
		option (google.api.http) = {
			post: "/api/IAMManager.DescribeActionRules"
		};
	}
	rpc GetActionRule(Id) returns (ActionRule) {
		option (google.api.http) = {
			post: "/api/IAMManager.GetActionRule"
		};
	}

	rpc ComparePassword(UserPassword) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.ComparePassword"
		};
	}
	rpc ModifyPassword(UserPassword) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyPassword"
		};
	}

	// check any of xid or role_name can do the action
	rpc CanDo(Action) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.CanDo"
		};
	}
}

// ----------------------------------------------------------------------------
// service api type
// ----------------------------------------------------------------------------

message Empty {
	//
}
message Bool {
	bool value = 1;
}

message Id {
	string id = 1;
}

message IdList {
	int32 total = 1;
	int32 offset = 2;
	repeated string value = 3;
}
message GroupList {
	int32 total = 1;
	int32 offset = 2;
	repeated Group value = 3;
}
message UserList {
	int32 total = 1;
	int32 offset = 2;
	repeated string value = 3;
}
message RoleList {
	int32 total = 1;
	int32 offset = 2;
	repeated string value = 3;
}
message ActionRuleList {
	int32 total = 1;
	int32 offset = 2;
	repeated string value = 3;
}

message Range {
	map<string,FieldValidator> filter = 1;
	int32 offset = 2;
	int32 limit = 3;
}

// ----------------------------------------------------------------------------
// END
// ----------------------------------------------------------------------------
