// Copyright 2018 The OpenPitrix Authors. All rights reserved.
// Use of this source code is governed by a Apache license
// that can be found in the LICENSE file.

syntax = "proto3";

package openpitrix.iam;

option go_package = "openpitrix.io/iam/openpitrix/pkg/pb;pb";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

import "filter.proto";

// ----------------------------------------------------------------------------
// The Pattern Syntax
// ----------------------------------------------------------------------------

// The pattern syntax is:
//
//	pattern:
//	{ term }
//	term:
//		'*'         matches any sequence of non-Separator characters
//		'**'        matches any sequence of characters, include path separators.
//		'?'         matches any single non-Separator character
//		'[' [ '^' ] { character-range } ']'
//		            character class (must be non-empty)
//		c           matches character c (c != '*', '?', '\\', '[')
//		'\\' c      matches character c
//
//	character-range:
//		c           matches character c (c != '\\', '-', ']')
//		'\\' c      matches character c
//		lo '-' hi   matches character c for lo <= c <= hi
//
// See https://godoc.org/path/filepath#Match
// See https://github.com/bmatcuk/doublestar
//
// Examples: https://golang.org/src/path/filepath/match_test.go

// ----------------------------------------------------------------------------
// basic type
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
//1.Feature
message Feature {
	string feature_id = 1;
	string feature_name = 2;
	string method = 3;
	string feature_code = 4;
	string description = 5;
	string data_level = 6;
	string module_level1 = 7 ;
	string module_level2 = 8 ;
	google.protobuf.Timestamp create_time = 9 ;
	google.protobuf.Timestamp update_time = 10 ;
	string owner = 11 ;
	string access_path = 12 ;
}

// ----------------------------------------------------------------------------
//2.Role
message Role {
	string role_id = 1;
	string role_name = 2;
	string description = 3;
	google.protobuf.Timestamp create_time = 4;
	google.protobuf.Timestamp update_time = 13;
	string owner = 11 ;
	string access_path = 12 ;
}

// ----------------------------------------------------------------------------
//3.RoleFeatureBinding
message RoleFeatureBinding {
	string binding_id = 1;
	string role_id = 2;
	string feature_id = 3;
	google.protobuf.Timestamp create_time = 4;
	google.protobuf.Timestamp update_time = 13;
	string owner = 11 ;
	string access_path = 12 ;
}

message RoleFeatureBindings{
	string role_id = 2;
	repeated string feature_id = 3;
}


// ----------------------------------------------------------------------------
//4.Group
message Group {
    string group_id = 1;
    string group_name = 2;
    string parent_group_id = 3;
    string group_path = 4;
    string level = 5;
    string order = 6;

	google.protobuf.Timestamp create_time = 7;
	google.protobuf.Timestamp update_time = 8;
	string owner = 11 ;
	string access_path = 12 ;
}


// ----------------------------------------------------------------------------
//5.User
message User {
    string user_id = 1;
    string group_id = 2;
    string user_name = 3;
	string position = 4;
    string email = 5;
    string phone_number = 6;
    string password = 7;
    string old_password = 8;
    string description = 9;
    string status = 10;
    google.protobuf.Timestamp create_time = 11;
    google.protobuf.Timestamp status_time = 12;
	google.protobuf.Timestamp update_time = 13;
	string owner = 14 ;
	string access_path = 15 ;
}

message UserPassword {
    string uid = 1;
    string password = 2;
}


// ----------------------------------------------------------------------------
//6.UserRoleBinding
message UserRoleBinding {
	string binding_id = 1;
	string role_id = 2;
	string user_id = 3;
	google.protobuf.Timestamp create_time = 11;
	google.protobuf.Timestamp status_time = 12;
	google.protobuf.Timestamp update_time = 13;
	string owner = 14 ;
	string access_path = 15 ;
}



message UserRoleBindings{
	string role_id = 2;
	repeated string user_id = 3;
}



message Action {
    string user_id = 1;       // uid_1234
    string method = 2;    // GRPC: ServiceName.ServiceMethodName
    string access_path = 3; // qingcloud.test
}


service IAMManager {
	//**************************************************************
	//1.Feature
	rpc CreateFeature(Feature) returns (Feature) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateFeature"
		};
	}
	rpc DeleteFeature(IdList) returns (Bool) {
		option (google.api.http) = {
			delete: "/api/IAMManager.DeleteFeature"
		};
	}
	rpc ModifyFeature(Feature) returns (Feature) {
		option (google.api.http) = {
			patch: "/api/IAMManager.ModifyFeature"
		};
	}
	rpc GetFeature(Id) returns (Feature) {
		option (google.api.http) = {
			get: "/api/IAMManager.GetFeature/{id}"
		};
	}

	rpc DescribeFeatures(Range) returns (FeatureList) {
		option (google.api.http) = {
			get: "/api/IAMManager.DescribeActionRules/{access_path=**}"
		};
	}

	//**************************************************************
	//2.Role
	rpc CreateRole(Role) returns (Role) {
		option (google.api.http) = {
			post: "/api/IAMManager.CreateRole"
		};
	}
	rpc DeleteRole(IdList) returns (Bool) {
		option (google.api.http) = {
			delete: "/api/IAMManager.DeleteRole"
		};
	}
	rpc ModifyRole(Role) returns (Role) {
		option (google.api.http) = {
			patch: "/api/IAMManager.ModifyRole"
		};
	}
	rpc GetRole(Id) returns (Role) {
		option (google.api.http) = {
			get: "/api/IAMManager.GetRole/{id}"
		};
	}

	rpc DescribeRoles(Range) returns (RoleList) {
		option (google.api.http) = {
			get: "/api/IAMManager.DescribeRoles/{access_path=**}"
		};
	}


	//**************************************************************
	//3.RoleFeatureBinding
	rpc ModifyRoleFeatureBindings(RoleFeatureBindings) returns (bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyRoleFeatureBindings"
		};
	}



	//**************************************************************
	//4.Group
    rpc CreateGroup(Group) returns (Group) {
        option (google.api.http) = {
			post: "/api/IAMManager.CreateGroup"
		};
    }

    rpc DeleteGroups(IdList) returns (Bool) {
        option (google.api.http) = {
			delete: "/api/IAMManager.DeleteGroups"
		};
    }

    rpc ModifyGroup(Group) returns (Group) {
        option (google.api.http) = {
			patch: "/api/IAMManager.ModifyGroup"
		};
    }

    rpc GetGroup(Id) returns (Group) {
        option (google.api.http) = {
			get: "/api/IAMManager.GetGroup/{id}"
		};
    }

	rpc DescribeGroups(Range) returns (GroupList) {
		option (google.api.http) = {
			get: "/api/IAMManager.DescribeGroups/{access_path=**}"
		};
	}

	//**************************************************************
	//5.User
    rpc CreateUser(User) returns (User) {
        option (google.api.http) = {
			post: "/api/IAMManager.CreateUser"
		};
    }
    rpc DeleteUsers(IdList) returns (Bool) {
        option (google.api.http) = {
			delete: "/api/IAMManager.DeleteUsers"
		};
    }
    rpc ModifyUser(User) returns (User) {
        option (google.api.http) = {
			patch: "/api/IAMManager.ModifyUser"
		};
    }
    rpc DescribeUsers(Range) returns (UserList) {
        option (google.api.http) = {
			get: "/api/IAMManager.DescribeUsers/{namespace=**}"
		};
    }
    rpc GetUser(Id) returns (User) {
        option (google.api.http) = {
			get: "/api/IAMManager.GetUser/{id}"
		};
    }

    rpc ComparePassword(UserPassword) returns (Bool) {
        option (google.api.http) = {
			post: "/api/IAMManager.ComparePassword"
		};
    }
    rpc ModifyPassword(UserPassword) returns (Bool) {
        option (google.api.http) = {
			post: "/api/IAMManager.ModifyPassword"
		};
    }

	//**************************************************************
	//6.UserRoleBinding
	rpc ModifyUserRoleBindings(UserRoleBindings) returns (Bool) {
		option (google.api.http) = {
			post: "/api/IAMManager.ModifyUserRoleBindings"
		};
	}


	//**************************************************************
	//7.other
	/**
	   getAccessPathByUserID

	   通过登录用户的user_id, method  得到用户的role, datalevel, 和group_path,  然后再根据datalevel(1,全局 2，同部门 3,仅个人) 得到access_path
	   得到的access_path放到req里面供各个业务模块写数据的时候获取写入业务表。


	*/



    // check any of xid or role_name can do the action
	//	通过登录用户的user_id, method 判断用户是否有权限执行业务模块的具体功能。
    rpc CanDo(Action) returns (Bool) {
        option (google.api.http) = {
			get: "/api/IAMManager.CanDo/{user_id}/{method}/{access_path=**}"
		};
    }
}

// ----------------------------------------------------------------------------
// service api type
// ----------------------------------------------------------------------------

message Bool {
    bool value = 1;
}

message Id {
    string id = 1;
}

message IdList {
    int32 total = 1;
    int32 offset = 2;
    repeated Id value = 3;
}

message GroupList {
    int32 total = 1;
    int32 offset = 2;
    repeated Group value = 3;
}

message UserList {
    int32 total = 1;
    int32 offset = 2;
    repeated User value = 3;
}
message RoleList {
    int32 total = 1;
    int32 offset = 2;
    repeated Role value = 3;
}
message FeatureList {
    int32 total = 1;
    int32 offset = 2;
    repeated Feature value = 3;
}

message Range {
    string uid = 1;
    string group_path = 2;
  //  map<string,FieldValidator> filter = 3;

    int32 offset = 4;
    int32 limit = 5;
}
