// Code generated by protoc-gen-go. DO NOT EDIT.
// source: openpitrix/iam/im/im.proto

package pbim // import "openpitrix.io/iam/pkg/pb/im"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Uid                  string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  []string             `protobuf:"bytes,2,rep,name=gid,proto3" json:"gid,omitempty"`
	Name                 string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Email                string               `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber          string               `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Description          string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Password             string               `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Status               string               `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Extra                map[string]string    `protobuf:"bytes,9,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	StatusTime           *timestamp.Timestamp `protobuf:"bytes,12,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *User) GetGid() []string {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *User) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *User) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *User) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *User) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *User) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

type UserList struct {
	Value                []*User  `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{1}
}
func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (dst *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(dst, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetValue() []*User {
	if m != nil {
		return m.Value
	}
	return nil
}

type Group struct {
	Gid                  string               `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	GroupPath            string               `protobuf:"bytes,2,opt,name=group_path,json=groupPath,proto3" json:"group_path,omitempty"`
	Name                 string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status               string               `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Extra                map[string]string    `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	StatusTime           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{2}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (dst *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(dst, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Group) GetGroupPath() string {
	if m != nil {
		return m.GroupPath
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Group) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *Group) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Group) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Group) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{3}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type UserId struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserId) Reset()         { *m = UserId{} }
func (m *UserId) String() string { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()    {}
func (*UserId) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{4}
}
func (m *UserId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserId.Unmarshal(m, b)
}
func (m *UserId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserId.Marshal(b, m, deterministic)
}
func (dst *UserId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserId.Merge(dst, src)
}
func (m *UserId) XXX_Size() int {
	return xxx_messageInfo_UserId.Size(m)
}
func (m *UserId) XXX_DiscardUnknown() {
	xxx_messageInfo_UserId.DiscardUnknown(m)
}

var xxx_messageInfo_UserId proto.InternalMessageInfo

func (m *UserId) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type UserIdList struct {
	Uid                  []string `protobuf:"bytes,1,rep,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserIdList) Reset()         { *m = UserIdList{} }
func (m *UserIdList) String() string { return proto.CompactTextString(m) }
func (*UserIdList) ProtoMessage()    {}
func (*UserIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{5}
}
func (m *UserIdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserIdList.Unmarshal(m, b)
}
func (m *UserIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserIdList.Marshal(b, m, deterministic)
}
func (dst *UserIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdList.Merge(dst, src)
}
func (m *UserIdList) XXX_Size() int {
	return xxx_messageInfo_UserIdList.Size(m)
}
func (m *UserIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdList.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdList proto.InternalMessageInfo

func (m *UserIdList) GetUid() []string {
	if m != nil {
		return m.Uid
	}
	return nil
}

type GroupId struct {
	Gid                  string   `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupId) Reset()         { *m = GroupId{} }
func (m *GroupId) String() string { return proto.CompactTextString(m) }
func (*GroupId) ProtoMessage()    {}
func (*GroupId) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{6}
}
func (m *GroupId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupId.Unmarshal(m, b)
}
func (m *GroupId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupId.Marshal(b, m, deterministic)
}
func (dst *GroupId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupId.Merge(dst, src)
}
func (m *GroupId) XXX_Size() int {
	return xxx_messageInfo_GroupId.Size(m)
}
func (m *GroupId) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupId.DiscardUnknown(m)
}

var xxx_messageInfo_GroupId proto.InternalMessageInfo

func (m *GroupId) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

type GroupIdList struct {
	Gid                  []string `protobuf:"bytes,1,rep,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupIdList) Reset()         { *m = GroupIdList{} }
func (m *GroupIdList) String() string { return proto.CompactTextString(m) }
func (*GroupIdList) ProtoMessage()    {}
func (*GroupIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{7}
}
func (m *GroupIdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupIdList.Unmarshal(m, b)
}
func (m *GroupIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupIdList.Marshal(b, m, deterministic)
}
func (dst *GroupIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupIdList.Merge(dst, src)
}
func (m *GroupIdList) XXX_Size() int {
	return xxx_messageInfo_GroupIdList.Size(m)
}
func (m *GroupIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupIdList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupIdList proto.InternalMessageInfo

func (m *GroupIdList) GetGid() []string {
	if m != nil {
		return m.Gid
	}
	return nil
}

type Range struct {
	Filter               map[string]*FieldValidator `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SortKey              string                     `protobuf:"bytes,2,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	Reverse              bool                       `protobuf:"varint,3,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Offset               int32                      `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int32                      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{8}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (dst *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(dst, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetFilter() map[string]*FieldValidator {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *Range) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

func (m *Range) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

func (m *Range) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Range) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Password struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Password) Reset()         { *m = Password{} }
func (m *Password) String() string { return proto.CompactTextString(m) }
func (*Password) ProtoMessage()    {}
func (*Password) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{9}
}
func (m *Password) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Password.Unmarshal(m, b)
}
func (m *Password) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Password.Marshal(b, m, deterministic)
}
func (dst *Password) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Password.Merge(dst, src)
}
func (m *Password) XXX_Size() int {
	return xxx_messageInfo_Password.Size(m)
}
func (m *Password) XXX_DiscardUnknown() {
	xxx_messageInfo_Password.DiscardUnknown(m)
}

var xxx_messageInfo_Password proto.InternalMessageInfo

func (m *Password) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Password) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ListUesrsResponse struct {
	User                 []*User  `protobuf:"bytes,1,rep,name=user,proto3" json:"user,omitempty"`
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUesrsResponse) Reset()         { *m = ListUesrsResponse{} }
func (m *ListUesrsResponse) String() string { return proto.CompactTextString(m) }
func (*ListUesrsResponse) ProtoMessage()    {}
func (*ListUesrsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{10}
}
func (m *ListUesrsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUesrsResponse.Unmarshal(m, b)
}
func (m *ListUesrsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUesrsResponse.Marshal(b, m, deterministic)
}
func (dst *ListUesrsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUesrsResponse.Merge(dst, src)
}
func (m *ListUesrsResponse) XXX_Size() int {
	return xxx_messageInfo_ListUesrsResponse.Size(m)
}
func (m *ListUesrsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUesrsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUesrsResponse proto.InternalMessageInfo

func (m *ListUesrsResponse) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ListUesrsResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ListGroupsResponse struct {
	Group                []*Group `protobuf:"bytes,1,rep,name=group,proto3" json:"group,omitempty"`
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGroupsResponse) Reset()         { *m = ListGroupsResponse{} }
func (m *ListGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGroupsResponse) ProtoMessage()    {}
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{11}
}
func (m *ListGroupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGroupsResponse.Unmarshal(m, b)
}
func (m *ListGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGroupsResponse.Marshal(b, m, deterministic)
}
func (dst *ListGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGroupsResponse.Merge(dst, src)
}
func (m *ListGroupsResponse) XXX_Size() int {
	return xxx_messageInfo_ListGroupsResponse.Size(m)
}
func (m *ListGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGroupsResponse proto.InternalMessageInfo

func (m *ListGroupsResponse) GetGroup() []*Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ListGroupsResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type JoinGroupRequest struct {
	Gid                  []string `protobuf:"bytes,1,rep,name=gid,proto3" json:"gid,omitempty"`
	Uid                  []string `protobuf:"bytes,2,rep,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinGroupRequest) Reset()         { *m = JoinGroupRequest{} }
func (m *JoinGroupRequest) String() string { return proto.CompactTextString(m) }
func (*JoinGroupRequest) ProtoMessage()    {}
func (*JoinGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{12}
}
func (m *JoinGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinGroupRequest.Unmarshal(m, b)
}
func (m *JoinGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinGroupRequest.Marshal(b, m, deterministic)
}
func (dst *JoinGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinGroupRequest.Merge(dst, src)
}
func (m *JoinGroupRequest) XXX_Size() int {
	return xxx_messageInfo_JoinGroupRequest.Size(m)
}
func (m *JoinGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinGroupRequest proto.InternalMessageInfo

func (m *JoinGroupRequest) GetGid() []string {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *JoinGroupRequest) GetUid() []string {
	if m != nil {
		return m.Uid
	}
	return nil
}

type LeaveGroupRequest struct {
	Gid                  []string `protobuf:"bytes,1,rep,name=gid,proto3" json:"gid,omitempty"`
	Uid                  []string `protobuf:"bytes,2,rep,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveGroupRequest) Reset()         { *m = LeaveGroupRequest{} }
func (m *LeaveGroupRequest) String() string { return proto.CompactTextString(m) }
func (*LeaveGroupRequest) ProtoMessage()    {}
func (*LeaveGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_im_953e4c6dcab79296, []int{13}
}
func (m *LeaveGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveGroupRequest.Unmarshal(m, b)
}
func (m *LeaveGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveGroupRequest.Marshal(b, m, deterministic)
}
func (dst *LeaveGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveGroupRequest.Merge(dst, src)
}
func (m *LeaveGroupRequest) XXX_Size() int {
	return xxx_messageInfo_LeaveGroupRequest.Size(m)
}
func (m *LeaveGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveGroupRequest proto.InternalMessageInfo

func (m *LeaveGroupRequest) GetGid() []string {
	if m != nil {
		return m.Gid
	}
	return nil
}

func (m *LeaveGroupRequest) GetUid() []string {
	if m != nil {
		return m.Uid
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "openpitrix.iam.im.User")
	proto.RegisterMapType((map[string]string)(nil), "openpitrix.iam.im.User.ExtraEntry")
	proto.RegisterType((*UserList)(nil), "openpitrix.iam.im.UserList")
	proto.RegisterType((*Group)(nil), "openpitrix.iam.im.Group")
	proto.RegisterMapType((map[string]string)(nil), "openpitrix.iam.im.Group.ExtraEntry")
	proto.RegisterType((*Empty)(nil), "openpitrix.iam.im.Empty")
	proto.RegisterType((*UserId)(nil), "openpitrix.iam.im.UserId")
	proto.RegisterType((*UserIdList)(nil), "openpitrix.iam.im.UserIdList")
	proto.RegisterType((*GroupId)(nil), "openpitrix.iam.im.GroupId")
	proto.RegisterType((*GroupIdList)(nil), "openpitrix.iam.im.GroupIdList")
	proto.RegisterType((*Range)(nil), "openpitrix.iam.im.Range")
	proto.RegisterMapType((map[string]*FieldValidator)(nil), "openpitrix.iam.im.Range.FilterEntry")
	proto.RegisterType((*Password)(nil), "openpitrix.iam.im.Password")
	proto.RegisterType((*ListUesrsResponse)(nil), "openpitrix.iam.im.ListUesrsResponse")
	proto.RegisterType((*ListGroupsResponse)(nil), "openpitrix.iam.im.ListGroupsResponse")
	proto.RegisterType((*JoinGroupRequest)(nil), "openpitrix.iam.im.JoinGroupRequest")
	proto.RegisterType((*LeaveGroupRequest)(nil), "openpitrix.iam.im.LeaveGroupRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountManagerClient is the client API for AccountManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountManagerClient interface {
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroups(ctx context.Context, in *GroupIdList, opts ...grpc.CallOption) (*Empty, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUsers(ctx context.Context, in *UserIdList, opts ...grpc.CallOption) (*Empty, error)
	ListUsers(ctx context.Context, in *Range, opts ...grpc.CallOption) (*ListUesrsResponse, error)
	ListGroups(ctx context.Context, in *Range, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	GetUsersByGroupId(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*UserList, error)
	ModifyUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ComparePassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Empty, error)
	ModifyPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Empty, error)
	GetGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*Group, error)
	ModifyGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*Empty, error)
}

type accountManagerClient struct {
	cc *grpc.ClientConn
}

func NewAccountManagerClient(cc *grpc.ClientConn) AccountManagerClient {
	return &accountManagerClient{cc}
}

func (c *accountManagerClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) DeleteGroups(ctx context.Context, in *GroupIdList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/DeleteGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) DeleteUsers(ctx context.Context, in *UserIdList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ListUsers(ctx context.Context, in *Range, opts ...grpc.CallOption) (*ListUesrsResponse, error) {
	out := new(ListUesrsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ListGroups(ctx context.Context, in *Range, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) GetUsersByGroupId(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/GetUsersByGroupId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ModifyUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/ModifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ComparePassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/ComparePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ModifyPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) GetGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ModifyGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/ModifyGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/openpitrix.iam.im.AccountManager/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountManagerServer is the server API for AccountManager service.
type AccountManagerServer interface {
	CreateGroup(context.Context, *Group) (*Group, error)
	DeleteGroups(context.Context, *GroupIdList) (*Empty, error)
	CreateUser(context.Context, *User) (*User, error)
	DeleteUsers(context.Context, *UserIdList) (*Empty, error)
	ListUsers(context.Context, *Range) (*ListUesrsResponse, error)
	ListGroups(context.Context, *Range) (*ListGroupsResponse, error)
	GetUser(context.Context, *UserId) (*User, error)
	GetUsersByGroupId(context.Context, *GroupId) (*UserList, error)
	ModifyUser(context.Context, *User) (*User, error)
	ComparePassword(context.Context, *Password) (*Empty, error)
	ModifyPassword(context.Context, *Password) (*Empty, error)
	GetGroup(context.Context, *GroupId) (*Group, error)
	ModifyGroup(context.Context, *Group) (*Group, error)
	JoinGroup(context.Context, *JoinGroupRequest) (*Empty, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*Empty, error)
}

func RegisterAccountManagerServer(s *grpc.Server, srv AccountManagerServer) {
	s.RegisterService(&_AccountManager_serviceDesc, srv)
}

func _AccountManager_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_DeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).DeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/DeleteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).DeleteGroups(ctx, req.(*GroupIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).DeleteUsers(ctx, req.(*UserIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ListUsers(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Range)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ListGroups(ctx, req.(*Range))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).GetUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_GetUsersByGroupId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).GetUsersByGroupId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/GetUsersByGroupId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).GetUsersByGroupId(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ModifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ModifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/ModifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ModifyUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ComparePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ComparePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/ComparePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ComparePassword(ctx, req.(*Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ModifyPassword(ctx, req.(*Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).GetGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ModifyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ModifyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/ModifyGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ModifyGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.iam.im.AccountManager/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.iam.im.AccountManager",
	HandlerType: (*AccountManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _AccountManager_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroups",
			Handler:    _AccountManager_DeleteGroups_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AccountManager_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _AccountManager_DeleteUsers_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AccountManager_ListUsers_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _AccountManager_ListGroups_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AccountManager_GetUser_Handler,
		},
		{
			MethodName: "GetUsersByGroupId",
			Handler:    _AccountManager_GetUsersByGroupId_Handler,
		},
		{
			MethodName: "ModifyUser",
			Handler:    _AccountManager_ModifyUser_Handler,
		},
		{
			MethodName: "ComparePassword",
			Handler:    _AccountManager_ComparePassword_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _AccountManager_ModifyPassword_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _AccountManager_GetGroup_Handler,
		},
		{
			MethodName: "ModifyGroup",
			Handler:    _AccountManager_ModifyGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _AccountManager_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _AccountManager_LeaveGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openpitrix/iam/im/im.proto",
}

func init() { proto.RegisterFile("openpitrix/iam/im/im.proto", fileDescriptor_im_953e4c6dcab79296) }

var fileDescriptor_im_953e4c6dcab79296 = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0x85, 0x24, 0xeb, 0x6f, 0x68, 0x24, 0xf1, 0x22, 0x89, 0x69, 0x3a, 0xb6, 0x65, 0x7e, 0x09,
	0x60, 0xf8, 0x43, 0x25, 0x40, 0x05, 0x1a, 0xc7, 0xe9, 0x4d, 0x93, 0x3a, 0x46, 0xda, 0xa4, 0x08,
	0x84, 0x26, 0x17, 0x46, 0x50, 0x67, 0x65, 0xae, 0xe9, 0xad, 0x49, 0x2e, 0xcb, 0x5d, 0xba, 0x11,
	0x82, 0xdc, 0xf4, 0xa2, 0x2f, 0xd0, 0x27, 0xe8, 0x2b, 0xf4, 0x55, 0xfa, 0x0a, 0x7d, 0x88, 0x5e,
	0x16, 0x3b, 0x4b, 0x4a, 0xb2, 0x44, 0xca, 0x68, 0x0c, 0x14, 0xf0, 0x85, 0x77, 0xe7, 0xe7, 0xec,
	0xcc, 0x39, 0x33, 0x14, 0x38, 0x22, 0x66, 0x51, 0xcc, 0x55, 0xc2, 0xdf, 0xf7, 0x38, 0x0d, 0x7b,
	0x5c, 0xff, 0x75, 0xe3, 0x44, 0x28, 0x41, 0x56, 0x26, 0xb6, 0x2e, 0xa7, 0x61, 0x97, 0x87, 0xce,
	0x3d, 0x5f, 0x08, 0x3f, 0x60, 0x3d, 0x1a, 0xf3, 0x1e, 0x8d, 0x22, 0xa1, 0xa8, 0xe2, 0x22, 0x92,
	0x26, 0xc0, 0xd9, 0xca, 0xac, 0x78, 0x1a, 0xa6, 0xa7, 0x3d, 0xc5, 0x43, 0x26, 0x15, 0x0d, 0xe3,
	0xcc, 0x61, 0x73, 0x1e, 0xed, 0x94, 0x07, 0x8a, 0x25, 0xc6, 0xee, 0xfe, 0x5d, 0x83, 0xa5, 0xd7,
	0x92, 0x25, 0xe4, 0x16, 0xd4, 0x52, 0xee, 0xd9, 0x95, 0x4e, 0x65, 0xa7, 0x3d, 0xd0, 0xff, 0xea,
	0x1b, 0x9f, 0x7b, 0x76, 0xb5, 0x53, 0xd3, 0x37, 0x3e, 0xf7, 0x08, 0x81, 0xa5, 0x88, 0x86, 0xcc,
	0xae, 0xa1, 0x13, 0xfe, 0x4f, 0x6e, 0x43, 0x9d, 0x85, 0x94, 0x07, 0xf6, 0x12, 0x5e, 0x9a, 0x03,
	0xd9, 0x86, 0xe5, 0xf8, 0x4c, 0x44, 0xec, 0x38, 0x4a, 0xc3, 0x21, 0x4b, 0xec, 0x3a, 0x1a, 0x2d,
	0xbc, 0xfb, 0x0e, 0xaf, 0x48, 0x07, 0x2c, 0x8f, 0xc9, 0x93, 0x84, 0xc7, 0xba, 0x20, 0xbb, 0x61,
	0x3c, 0xa6, 0xae, 0x88, 0x03, 0xad, 0x98, 0x4a, 0xf9, 0xb3, 0x48, 0x3c, 0xbb, 0x89, 0xe6, 0xf1,
	0x99, 0xdc, 0x85, 0x86, 0x54, 0x54, 0xa5, 0xd2, 0x6e, 0xa1, 0x25, 0x3b, 0x91, 0x3d, 0xa8, 0xb3,
	0xf7, 0x2a, 0xa1, 0x76, 0xbb, 0x53, 0xdb, 0xb1, 0xfa, 0x6e, 0x77, 0xae, 0xa3, 0x5d, 0x5d, 0x6e,
	0xf7, 0x40, 0x3b, 0x1d, 0x44, 0x2a, 0x19, 0x0d, 0x4c, 0x00, 0x79, 0x0c, 0xd6, 0x49, 0xc2, 0xa8,
	0x62, 0xc7, 0xba, 0x87, 0x36, 0x74, 0x2a, 0x3b, 0x56, 0xdf, 0xe9, 0x9a, 0x06, 0x77, 0xf3, 0x06,
	0x77, 0xbf, 0xcf, 0x1b, 0x3c, 0x00, 0xe3, 0xae, 0x2f, 0x74, 0x70, 0x1a, 0x7b, 0xe3, 0x60, 0xeb,
	0xea, 0x60, 0xe3, 0x9e, 0x07, 0x9b, 0xd7, 0x9b, 0xe0, 0xe5, 0xab, 0x83, 0x8d, 0xbb, 0xbe, 0x70,
	0xf6, 0x00, 0x26, 0xb5, 0x68, 0xce, 0xce, 0xd9, 0x28, 0x67, 0xf1, 0x9c, 0x8d, 0x34, 0x3f, 0x17,
	0x34, 0x48, 0x99, 0x5d, 0x35, 0xfc, 0xe0, 0x61, 0xbf, 0xba, 0x57, 0x71, 0x1f, 0x41, 0x4b, 0xb7,
	0xe2, 0x05, 0x97, 0x8a, 0x7c, 0x96, 0x7b, 0x55, 0xb0, 0x6d, 0xab, 0x25, 0x6d, 0xcb, 0xc2, 0xdd,
	0x3f, 0x6a, 0x50, 0x3f, 0x4c, 0x44, 0x1a, 0xe7, 0x22, 0xc9, 0x00, 0xb5, 0x48, 0x36, 0x00, 0x7c,
	0x6d, 0x3a, 0x8e, 0xa9, 0x3a, 0xcb, 0x50, 0xdb, 0x78, 0xf3, 0x8a, 0xaa, 0xb3, 0x42, 0x0d, 0xcd,
	0x48, 0x61, 0x69, 0x5e, 0x0a, 0x13, 0xba, 0xeb, 0x97, 0xe8, 0x7e, 0x94, 0xd3, 0xdd, 0xc0, 0x77,
	0xff, 0xaf, 0xe0, 0xdd, 0xf8, 0xce, 0xab, 0xf9, 0x6e, 0x5e, 0x87, 0xef, 0xd6, 0x75, 0xf8, 0x6e,
	0xff, 0x47, 0x7c, 0x37, 0xa1, 0x7e, 0x10, 0xc6, 0x6a, 0xe4, 0x3a, 0xd0, 0xd0, 0x64, 0x3e, 0xf7,
	0xe6, 0x87, 0xde, 0xdd, 0x04, 0x30, 0x36, 0x94, 0xc5, 0xd8, 0x5e, 0xcb, 0xed, 0xeb, 0xd0, 0xc4,
	0x86, 0x3e, 0xf7, 0xe6, 0xa9, 0x77, 0xb7, 0xc0, 0xca, 0x8c, 0x79, 0xb4, 0x3f, 0x89, 0xd6, 0x0e,
	0xbf, 0x56, 0xa1, 0x3e, 0xa0, 0x91, 0xcf, 0xc8, 0x97, 0xd0, 0x30, 0x7b, 0x28, 0x53, 0xdc, 0xfd,
	0x02, 0xe6, 0xd0, 0xb3, 0xfb, 0x0c, 0xdd, 0x0c, 0x75, 0x59, 0x0c, 0x59, 0x83, 0x96, 0x14, 0x89,
	0x3a, 0xd6, 0xb5, 0x9b, 0x3a, 0x9b, 0xfa, 0xfc, 0x2d, 0x1b, 0x11, 0x1b, 0x9a, 0x09, 0xbb, 0x60,
	0x89, 0x34, 0x12, 0x6b, 0x0d, 0xf2, 0xa3, 0xd6, 0x90, 0x38, 0x3d, 0x95, 0x4c, 0xa1, 0xc0, 0xea,
	0x83, 0xec, 0xa4, 0x3b, 0x16, 0xf0, 0x90, 0x2b, 0x94, 0x56, 0x7d, 0x60, 0x0e, 0xce, 0x5b, 0xb0,
	0xa6, 0x90, 0x0b, 0x1a, 0xfd, 0x70, 0xba, 0xd1, 0x56, 0x7f, 0xbb, 0xa0, 0x80, 0x67, 0x9c, 0x05,
	0xde, 0x1b, 0x1a, 0x70, 0x8f, 0x2a, 0x91, 0x4c, 0x73, 0xb1, 0x07, 0xad, 0x57, 0xf9, 0x2a, 0x9b,
	0xdf, 0xbc, 0xd3, 0x8b, 0xaf, 0x7a, 0x79, 0xf1, 0xb9, 0x6f, 0x60, 0x45, 0x37, 0xf7, 0x35, 0x93,
	0x89, 0x1c, 0x30, 0x19, 0x8b, 0x48, 0x32, 0xf2, 0x7f, 0x58, 0x4a, 0xe5, 0xb8, 0x97, 0xa5, 0xd3,
	0x8b, 0x4e, 0xba, 0x5e, 0x25, 0x14, 0x0d, 0x30, 0x75, 0x7d, 0x60, 0x0e, 0xee, 0x11, 0x10, 0x9d,
	0x17, 0xf9, 0x9b, 0x24, 0xee, 0x42, 0x1d, 0x47, 0x37, 0xcb, 0x6c, 0x97, 0xcd, 0xd7, 0xc0, 0xb8,
	0x95, 0xe4, 0xfe, 0x02, 0x6e, 0x7d, 0x23, 0x78, 0x64, 0x3c, 0xd9, 0x4f, 0x29, 0x2b, 0x12, 0x47,
	0xde, 0x87, 0xea, 0x44, 0x6c, 0x0f, 0x61, 0xe5, 0x05, 0xa3, 0x17, 0xec, 0xdf, 0x06, 0xf6, 0x7f,
	0x5f, 0x86, 0x1b, 0x5f, 0x9d, 0x9c, 0x88, 0x34, 0x52, 0x2f, 0x69, 0x44, 0x7d, 0x96, 0x90, 0x1f,
	0xc0, 0x7a, 0x8a, 0xf3, 0x6b, 0xf6, 0x56, 0x69, 0x25, 0x4e, 0xa9, 0xc5, 0x5d, 0xff, 0xe5, 0xcf,
	0xbf, 0x7e, 0xab, 0xde, 0x71, 0x6f, 0xe9, 0x8f, 0xb1, 0xc4, 0xcf, 0x29, 0x56, 0x2d, 0xf7, 0x2b,
	0xbb, 0x84, 0xc1, 0xf2, 0xd7, 0x2c, 0x60, 0x59, 0x7e, 0x49, 0x36, 0xcb, 0xd2, 0x98, 0xe1, 0x28,
	0x84, 0x31, 0xe3, 0x99, 0xc1, 0xec, 0x16, 0xc2, 0x1c, 0x01, 0x98, 0x32, 0xf0, 0xa3, 0x5d, 0xc6,
	0xb4, 0x53, 0x66, 0x70, 0x1d, 0x4c, 0x7e, 0xdb, 0xbd, 0x39, 0x49, 0xae, 0x45, 0x81, 0xb9, 0x87,
	0x60, 0x99, 0x12, 0xb4, 0xa7, 0x24, 0x1b, 0x25, 0x39, 0xae, 0x2c, 0x60, 0x11, 0x86, 0x07, 0x6d,
	0x94, 0x2f, 0x22, 0xd8, 0x65, 0x43, 0xef, 0x14, 0xad, 0x83, 0x39, 0xd9, 0xbb, 0xab, 0x08, 0xb4,
	0x42, 0x66, 0x81, 0x88, 0x0f, 0x30, 0x11, 0xf3, 0x02, 0x98, 0x07, 0x25, 0x30, 0x97, 0xa7, 0xc0,
	0xb5, 0x11, 0x87, 0x90, 0x39, 0x46, 0xc8, 0x5b, 0x68, 0x1e, 0x32, 0xac, 0x86, 0xac, 0x95, 0xb6,
	0xab, 0x9c, 0x8d, 0x0d, 0x4c, 0xbc, 0x4a, 0xee, 0xcc, 0x14, 0xd0, 0xfb, 0x90, 0x72, 0xef, 0x23,
	0x49, 0x60, 0x25, 0xcb, 0x2e, 0x9f, 0x8c, 0xf2, 0xb5, 0xeb, 0x94, 0x0b, 0xcb, 0x59, 0x2f, 0x01,
	0xd2, 0x35, 0xb9, 0xf7, 0x11, 0x6c, 0x93, 0xdc, 0x9b, 0xad, 0xa2, 0xf7, 0xc1, 0xe7, 0xde, 0xc7,
	0xac, 0x75, 0xef, 0x00, 0x5e, 0x0a, 0x8f, 0x9f, 0x8e, 0x3e, 0x51, 0x60, 0x1d, 0x44, 0x71, 0xfa,
	0xc5, 0x25, 0x69, 0x09, 0x08, 0xb8, 0xf9, 0x54, 0x84, 0x31, 0x4d, 0xd8, 0x78, 0x05, 0x16, 0xbd,
	0x3b, 0x37, 0x2e, 0x10, 0xda, 0x03, 0xc4, 0xda, 0x72, 0x9d, 0x09, 0x56, 0xbe, 0x27, 0xf7, 0x4f,
	0x0c, 0x84, 0x06, 0x0c, 0xe1, 0x86, 0x29, 0xe9, 0xba, 0x78, 0x59, 0x07, 0xdd, 0xb5, 0x02, 0xbc,
	0x10, 0x11, 0x34, 0xdc, 0x3b, 0x68, 0x1d, 0x32, 0x23, 0xa1, 0x85, 0x64, 0x95, 0x2f, 0x9a, 0x4d,
	0xc4, 0xb1, 0xc9, 0xdd, 0x62, 0xa6, 0x88, 0x07, 0x96, 0x29, 0xe8, 0xd3, 0x77, 0xd9, 0x36, 0x42,
	0xac, 0xf7, 0x4b, 0x20, 0x74, 0x1d, 0x01, 0xb4, 0xc7, 0x5b, 0x9b, 0x14, 0xfd, 0xb2, 0x9a, 0xdd,
	0xe9, 0x0b, 0x3a, 0x97, 0xa9, 0xc2, 0xbd, 0x33, 0xb7, 0xd3, 0x7e, 0x14, 0x3c, 0x32, 0xaa, 0x80,
	0xc9, 0xae, 0x27, 0x85, 0xf3, 0x3f, 0xfb, 0x29, 0x58, 0x80, 0x97, 0x95, 0xe7, 0xce, 0x95, 0xb7,
	0x1f, 0xe8, 0x2c, 0xfb, 0x95, 0xdd, 0x27, 0xee, 0x51, 0x67, 0x3a, 0x5a, 0x18, 0x3a, 0xcf, 0xfd,
	0x5e, 0x3c, 0xec, 0xf1, 0xf0, 0x71, 0x3c, 0xe4, 0xe1, 0xb0, 0x81, 0x3f, 0xc6, 0x3e, 0xff, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xe7, 0x27, 0x6a, 0xca, 0xb4, 0x0d, 0x00, 0x00,
}
